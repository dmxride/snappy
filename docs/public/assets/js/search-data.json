{
  "0": {
    "id": "0",
    "title": "",
    "content": "404 Page not found :( The requested page could not be found.",
    "url": "/404.html",
    "relUrl": "/404.html"
  },
  "1": {
    "id": "1",
    "title": "Adding Snappy to a Project",
    "content": "Adding Snappy to a Project We recommend using one of our starters which comes already prepared to dinamycally generate screens and components using hygen. To install Snappy using npm run the following command on your project folder. $ npm i -s git+ssh://git@gitlab.ubiwhere.com:knowledge-base/frontend/Starters/snappy.git If you prefer to use yarn run the following command instead. $ yarn add git+ssh://git@gitlab.ubiwhere.com:knowledge-base/frontend/Starters/snappy.git After setting up your project to use react-native with the react-native CLI and react-native-navigation you should change your index.js file to look like something like this: import { SnappyNavigation } from &#39;snappy&#39; import Screens from &#39;src/navigation/screens&#39; import Translations from &#39;src/translations&#39; import Theme from &#39;src/ui/theme&#39; // Register all screens on launch and attach the theme and app internationalization SnappyNavigation.registerScreens(Screens, Theme.darkMode, Translations, () =&gt; { console.log(&quot;APP HAS BEEN STARTED&quot;) }) instead of this: import {AppRegistry} from &#39;react-native&#39;; import App from &#39;./App&#39;; import {name as appName} from &#39;./app.json&#39;; AppRegistry.registerComponent(appName, () =&gt; App); Notice here that we are importing 3 very important files: Screens, Translations and Theme. These 3 files are the only configuration you’ll need in order to setup your project. Bear in mind that the Screens will be automatically generated for you, so no need to worry about all the react-native-navigation fuzz of registering your components. Only when connecting Snappy’s logic to a screen component will you be able to access to Snappy’s methods. These are all the methods and classes which are binded as props: screens - collection of all the available screens navigate - a set of methods abstracted from react-native-navigation to navigate between the screens. Follows the same logics as react-native-navigation and requires the componentId to be passed as a prop for certain methods, but don’t worry each screen as its own componentId defined as a prop: goToNavigation - equivalent of setNavigationRoot goToNavigationModal - equivalent of showModal dismissNavigationModal - equivalent of dismissModal goToTabNavigation - equivalent of setNavigationRoot with bottomTabs structure goToScreen - equivalent of push showOverlay - equivalent of showOverlay dismissOverlay - equivalent of dismissOverlay goBack - equivalent of pop goBackTo - equivalent of popTo goToRoot - equivalent of popToRoot actions - all the actions created inside the Logic file plus some Snappy default built-in actions such as: set_theme - changes the current theme and saves it in memory change_locale - changes the current locale and saves it in memory set_locale - changes the current locale but doesn’t save it in memory theme - access to the currently set theme i18n - all of i18n methods, but most importantly i18n.t() Connecting Logic to a Screen First step to to connect a logic to a Screen Component would be to create a logic file. Snappy’s logic structure can be found at the Logic section. A component connected to Snappy should look like something like this: import React from &#39;react&#39; import { View, Text } from &#39;react-native&#39; import snappy, { SnappyComponents } from &#39;snappy&#39; import Logic from &#39;./logic&#39; const YourComponent = props =&gt; { const { screens, actions, navigate, theme } = props return ( &lt;View&gt; &lt;Text&gt;YourComponent&lt;/Text&gt; &lt;/View&gt; ) } export default snappy(Logic)(YourComponent) Basically here Snappy is working as an Higher-Order Component (HOC) which handles all the store creations for each component due to the fact that with react-native-navigation each screen ends up having it’s own store for perfomance purposes. and its logic to something very close to this: import { SnappyEffects } from &#39;snappy&#39; export default { sagas: { //insert sagas here }, reducers: { //insert reducers here } } For more details about Snappy’s logic visit the Logic section. Screens A Screens file would be a collection of screens where each defined screen should have 3 core components. It’s id, the component to be registered and a structure The structure object must be a function with at least 1 parameter, the props parameter which will be passed from the navigation methods down to the the component it self. This object follows the same rules as react-native-navigation layout types. Because Snappy is still in development this process requires the screen’s id to be repeated twice. Both inside and outside the structure object. import YourScreen from &#39;src/ui/screens/YourScreen&#39; export default { YOUR_SCREEN: { id: &#39;YourScreen&#39;, component: YourScreen, structure: (props, options = {}) =&gt; ({ component: { id: &#39;YourScreen&#39;, name: &#39;YourScreen&#39;, passProps: { ...props }, options: { topBar: { visible: false, animate: false, elevation: 0, drawBehind: true, background: { color: &#39;transparent&#39; }, backButton: { visible: false }, } } } }) } } So if for instance you would like to navigate to the previous screen and pass a prop you would do something as follows: navigate.goToScreen(screens.YOUR_SCREEN, { componentId, title: &#39;SOME_TITLE_PROP&#39; }) Translations Snappy is configured to use react-i18next for translations and react-native-localize to detect your initial language if none was set. When changing a language Snappy will automatically set the new values as default when reopening the application. import en from &#39;./en-US.json&#39; import pt from &#39;./pt-PT.json&#39; import pt from &#39;./es-ES.json&#39; export default { en, pt, es } { &quot;translation&quot;: { &quot;hello_snappy&quot;: &quot;Oh hi Mark&quot; } } { &quot;translation&quot;: { &quot;hello_snappy&quot;: &quot;Olá Mark&quot; } } { &quot;translation&quot;: { &quot;hello_snappy&quot;: &quot;Hola Mark&quot; } } Theme The imported file with themes must consist of a collection of one or more themes. When changing a theme Snappy will automatically set the new value as default when reopening the application. export default { darkMode: { font: { bold: &quot;BlissBold&quot;, light: &quot;BlissLight&quot;, medium: &quot;BlissMedium&quot;, regular: &quot;BlissRegular&quot; }, colors: { main: { white: &quot;#FFFFFF&quot;, blue: &quot;#51B8EA&quot;, }, palette: { grey: [&quot;#B2B2B2&quot;, &quot;#161616&quot;], blue: [&quot;#9CB0D5&quot;, &quot;#5174B1&quot;, &quot;#1B4794&quot;], }, gradients: { blue: [&quot;#51B8EA&quot;, &quot;#1B4794&quot;], } } } }",
    "url": "/adding_snappy_to_a_project/",
    "relUrl": "/adding_snappy_to_a_project/"
  },
  "2": {
    "id": "2",
    "title": "Components",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com You can find the source code for Minima at GitHub: jekyll / minima You can find the source code for Jekyll at GitHub: jekyll / jekyll",
    "url": "/components/",
    "relUrl": "/components/"
  },
  "3": {
    "id": "3",
    "title": "Forms",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com You can find the source code for Minima at GitHub: jekyll / minima You can find the source code for Jekyll at GitHub: jekyll / jekyll",
    "url": "/forms/",
    "relUrl": "/forms/"
  },
  "4": {
    "id": "4",
    "title": "Getting Started",
    "content": "Getting Started with Snappy Snappy is like those cheap brand ripoffs. It currently aims for projects which rely on react-native and react-native-navigation. Snappy aims to ease the mobile development process by abstracting some of the most repetitive and common processes such as associating internationalization to a project, connecting to a store and persisting data, providing themes, adding native navigation solutions, creating forms and providing native components such as toasters, popups, modals, bottom drawers and much more. The following libraries already come bundled and are integrated with Snappy so there is no need to install them: @react-native-community/async-storage: ^1.7.1 i18next: ^19.1.0 react-native-localize: ^1.3.3 react-redux: ^7.1.1 redux-logger: ^3.0.6 redux-persist: ^6.0.0 redux-saga: ^1.1.1 In order to use Snappy you must first configure your react-native project to use react-native-navigation.",
    "url": "/getting_started/",
    "relUrl": "/getting_started/"
  },
  "5": {
    "id": "5",
    "title": "i18N",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com You can find the source code for Minima at GitHub: jekyll / minima You can find the source code for Jekyll at GitHub: jekyll / jekyll",
    "url": "/i18n/",
    "relUrl": "/i18n/"
  },
  "6": {
    "id": "6",
    "title": "",
    "content": "",
    "url": "/",
    "relUrl": "/"
  },
  "7": {
    "id": "7",
    "title": "API Reference",
    "content": "",
    "url": "/api_reference/",
    "relUrl": "/api_reference/"
  },
  "8": {
    "id": "8",
    "title": "Installation",
    "content": "",
    "url": "/installation/",
    "relUrl": "/installation/"
  },
  "9": {
    "id": "9",
    "title": "Logic",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com You can find the source code for Minima at GitHub: jekyll / minima You can find the source code for Jekyll at GitHub: jekyll / jekyll",
    "url": "/logic/",
    "relUrl": "/logic/"
  },
  "10": {
    "id": "10",
    "title": "Navigation",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com You can find the source code for Minima at GitHub: jekyll / minima You can find the source code for Jekyll at GitHub: jekyll / jekyll",
    "url": "/navigation/",
    "relUrl": "/navigation/"
  },
  "11": {
    "id": "11",
    "title": "Themes",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com You can find the source code for Minima at GitHub: jekyll / minima You can find the source code for Jekyll at GitHub: jekyll / jekyll",
    "url": "/themes/",
    "relUrl": "/themes/"
  }
  
}
